<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ananthu Kanive</title>
    <link>https://lonelycpp.github.io/</link>
    <description>Recent content on Ananthu Kanive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Ananthu P Kanive</copyright>
    <lastBuildDate>Wed, 15 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://lonelycpp.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Observables in a reactive world</title>
      <link>https://lonelycpp.github.io/2023/11/15/observables-in-a-reactive-world/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lonelycpp.github.io/2023/11/15/observables-in-a-reactive-world/</guid>
      <description>Picture this: you&amp;rsquo;re faced with the challenge of updating state from realms outside the familiar component tree. What was once a straightforward task within React&amp;rsquo;s structured paradigm suddenly transforms into a complex puzzle. Traditional solutions falter, leaving React developers grappling with a dilemma that defies the simplicity promised by the framework.
As React developers, we love how easy it is to handle state inside our components. But things get a bit tricky when we need to update state from outside React&amp;rsquo;s usual territory.</description>
    </item>
    
    <item>
      <title>React Native Animated</title>
      <link>https://lonelycpp.github.io/2020/06/18/animations-react-native/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lonelycpp.github.io/2020/06/18/animations-react-native/</guid>
      <description>React Native comes with an awesome Animated API to create smooth and performant animations in your app. It is included with react native which means no dependencies or installations with great cross platform support!
It&amp;rsquo;s already amazing.
I will be using some simple functions from the Animated API to get you started, after which reading the official documentation here will make much more sense.
Animated.Value Holds an animation state. It is always a javascript Number Animations react to changes in this value Animated.</description>
    </item>
    
    <item>
      <title>Building a UI component library for a product</title>
      <link>https://lonelycpp.github.io/2020/05/11/building-component-library/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lonelycpp.github.io/2020/05/11/building-component-library/</guid>
      <description>Building a component library is a very important milestone in a products life-cycle. It usually isn’t the first thing anyone talks about in the early stages of a product. Startups usually don’t even hire designers, they give that responsibility to front end or mobile developers to come up with a clean user interface owing to the fact that they might have worked with designers in the past and have picked up on some of the UI/UX knowledge.</description>
    </item>
    
    <item>
      <title>A better way to integrate youtube into react native</title>
      <link>https://lonelycpp.github.io/2020/03/15/react-native-youtube/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lonelycpp.github.io/2020/03/15/react-native-youtube/</guid>
      <description>Videos are a great way to communicate with your users. In a customer facing ecosystem, youtube plays a part in growth, brand value and engagement. Uploading a video to youtube is easy, cost effective, easy to advertize and might actually make you money in the long run. Youtube is a household name and users are comfortable clicking on a youtube video.
When you&amp;rsquo;re building a mobile app, it just makes sense to include youtube.</description>
    </item>
    
  </channel>
</rss>
